//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop
 #include "Unit2.h"
   //#include <vcl\Clipbrd.hpp>
#include <math.h>
#include <math.hpp>
#include <tchar.h>
#include <iostream>
#include <fstream>
#pragma argsused
#include "Unit1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm3 *Form3;
Graphics::TBitmap *Sobel(Graphics::TBitmap *image);
Graphics::TBitmap *img = new Graphics::TBitmap;
Graphics::TBitmap *Sob = new Graphics::TBitmap;
Graphics::TBitmap *Try = new Graphics::TBitmap;
Graphics::TBitmap *Test = new Graphics::TBitmap;
Graphics::TBitmap *Etalon = new Graphics::TBitmap;
Graphics::TBitmap*cells=new Graphics::TBitmap;// User declarations
using namespace std;
bool show=1;
 struct TPixel{
	 BYTE B;
	 BYTE G;
	 BYTE R;
 };

//---------------------------------------------------------------------------
__fastcall TForm3::TForm3(TComponent* Owner)
	: TForm(Owner)
{

}
//---------------------------------------------------------------------------
void __fastcall TForm3::Button1Click(TObject *Sender)
{
//Image1->Left += 100 ;


//Image1->Picture->LoadFromFile(OpenPictureDialog1->FileName);
//Image1->Picture->Bitmap->LoadFromFile(OpenPictureDialog1->FileName);

}
//---------------------------------------------------------------------------


Graphics::TBitmap *Sobel(Graphics::TBitmap *img) {
    Graphics::TBitmap *returnImage = new Graphics::TBitmap;
    returnImage->SetSize(img->Width, img->Height);
    returnImage->PixelFormat = pf24bit;
    Byte *ptr, *ptrup, *ptrdown, *ptrres, *ptrcur;
    int sumX = 0, sumY = 0;
    short SUM = 0;

    int GX[3][3]={{-1, 0, 1},
                 {-2, 0, 2},
                 {-1, 0, 1}};

    int GY[3][3]={{ 1, 2, 1},
                 { 0, 0, 0},
                 {-1,-2,-1}};

    for (int Y = 1; Y < img->Height - 1; Y++) {
		ptrres = (Byte*)returnImage->ScanLine[Y];
        ptr = (Byte*)img->ScanLine[Y];
        ptrup = (Byte*)img->ScanLine[Y - 1];
        ptrdown = (Byte*)img->ScanLine[Y + 1];
        for (int X = 0; X < 3 * img->Width; X += 3) {
            if (Y - 1 == 0 || Y + 1 == img->Height - 1) SUM = 0;
            else if (X == 0 || X == img->Width - 3) SUM = 0;
            else {
                sumX = 0;
                sumY = 0;
                for (int I = -1; I <= 1; I++) {
                    for (int J = -1; J <= 1; J++) {
                        switch(I) {
                        case -1:ptrcur = ptrup; break;
                        case 0:ptrcur = ptr; break;
                        case 1:ptrcur = ptrdown; break;
                        }
                        int piX = 3 * J + X;
                        int NC = 0.299 * ptrcur[piX + 2] + 0.587 * ptrcur
                            [piX + 1] + 0.114 * ptrcur[piX];
                        sumX = sumX + NC * GX[I + 1][J + 1];
                        sumY = sumY + NC * GY[I + 1][J + 1];
                    }
                }
                SUM = abs(sumX) + abs(sumY);
                if (SUM > 255) SUM = 255;
                if (SUM < 0) SUM = 0;
            }
            SUM = 255 - abs(SUM);
            ptrres[X + 2] = SUM;
            ptrres[X + 1] = SUM;
            ptrres[X] = SUM;
        }
    }
    return returnImage;
}
void __fastcall TForm3::N2Click(TObject *Sender)
{
 int x,y;
OpenPictureDialog1->Execute();
img->LoadFromFile(OpenPictureDialog1->FileName);
//Image1->Picture->LoadFromFile(OpenPictureDialog1->FileName);
 	Image1->Width=img->Width;
	   Image1->Height=img->Height;
Image1->Canvas->Draw(0,0,img);

}
//---------------------------------------------------------------------------
void __fastcall TForm3::N3Click(TObject *Sender)
{

cells->Width=Image1->Width;
cells->Height=Image1->Height;
 /*Image2->Width=Image1->Width;
 Image2->Height=Image1->Height;         */
//Sobel(img)->SaveToFile("2.bmp");
 //Image2->Picture->LoadFromFile("2.bmp");
 Sob =  Sobel(img);
 Form2->Sob = Sobel(img);
 Image2->Canvas->Draw(0,0,Sob);
 Form2->Image2->Canvas->Draw(0,0,Sob);
 Form2->ShowModal();
}
//---------------------------------------------------------------------------


void __fastcall TForm3::test1Click(TObject *Sender)
{
	BYTE gray;
	for (int y = 0; y< img->Height ; y++) {
		TPixel *line = (TPixel*)img->ScanLine[y];
		for (int x = 0; x < img->Width ; x++) {
			gray=0.3*line[x].R+0.59*line[x].G+0.11*line[x].B;
			line[x].R=line[x].G=line[x].B = gray;
		}
	}
	Image1->Canvas->Draw(0,0,img);
}
//---------------------------------------------------------------------------

void __fastcall TForm3::N4Click(TObject *Sender)
{
  if(!show)    //Если сеть включена
	 {
		 Image2->Picture->Bitmap=0;       //Очищаем Битмап
		  Image2->Canvas->Draw(0,0,Sob); //Рисуем слой с фигурами
		 show=1;                    //Сеть выключена
	 }
	 else {  //В противном случае
	 Image2->Canvas->Draw(0,0,Sob);      //Рисуем слой с фигурами
	 Image2->Canvas->Draw(0,0,cells);show=0; //А на нем слой с сеткой
	  }
}
//---------------------------------------------------------------------------

void __fastcall TForm3::FormCreate(TObject *Sender)
{

cells->Transparent=1;              //Включаем прозрачность у Битмапа с сетью, чтобы он не перекрывал Битмап с фигурами
cells->TransparentColor=clWhite;  //Цвет прозрачности - белый
cells->Canvas->Pen->Color=clGray;
  //Размеры обоих Битмапов подгоняем под размеры Image1
cells->Width=Image1->Width;       //  figurs->Width=Image1->Width;
cells->Height=Image1->Height;	 //figurs->Height=Image1->Height;
 //Вот тут рисуем координатную сеть
int size=15; //Размер одной клетки
   for(int i=0;i<Image1->Width;i+=size)
   {
	  for(int j=0;j<Image1->Height;j+=size)
   {
	  cells->Canvas->Rectangle(i,j,i+size,j+size);
   }
	  }
   Image2->Canvas->Draw(0,0,cells);
}
//---------------------------------------------------------------------------





void __fastcall TForm3::N5Click(TObject *Sender)
{
	int i ;
	int j;
	int size=15;
		for (i = 0; i < Sob->Width; i+=size) {
			for (j = 0; j < Sob->Height; j+=size) {
				if (cells->Canvas->Pixels[i][j]!= clWhite && Sob->Canvas->Pixels[i][j] != clWhite) {
				Image2->Canvas->Pixels[i][j] = clBlue;
			   //	Image2->Canvas->LineTo(i, j);
												}
	}
 }
}
//---------------------------------------------------------------------------

void __fastcall TForm3::N6Click(TObject *Sender)
{
int i ;
	int j;
	int MaxW=0,MaxH=0,MinW=Sob->Width,MinH=Sob->Height;
	int MaxW2=0,MaxH2=0,MinW2=Sob->Width,MinH2=Sob->Height;
		for (i = 1; i < Sob->Width/2; i++) {
				for (j = 1; j < Sob->Height; j++){
					if (Sob->Canvas->Pixels[i][j]!=clWhite) {
						 if (MaxH<j) {
							 MaxH=j;

						 }
						 if (MinH>j) {
							 MinH=j;

						 }

					}
					Image2->Canvas->Pixels[i][MaxH] = clRed;
						Image2->Canvas->Pixels[i][MinH] = clRed;
				}
		}

		for (i = Sob->Width-1; i > Sob->Width/2; i--) {
			for (j = MaxH; j > MinH; j--) {
				 if (Sob->Canvas->Pixels[i][j]!=clWhite) {
						 if (MaxH2<j) {
							 MaxH2=j;

						 }
						 if (MinH2>j) {
							 MinH2=j;

						 }
						 Image2->Canvas->Pixels[i][MaxH2] = clRed;
						 Image2->Canvas->Pixels[i][MinH2] = clRed;
					}
			}
		}
	 Try = Image2->Picture->Bitmap;
   // Image2->Canvas->CopyRect(Try,Image2->Canvas,Image2);
	  //Image1->Canvas->Draw(0,0,Try);
}
//---------------------------------------------------------------------------
 /* string DoubleToStr(double d)
			{
			char buf[256];//сколько надо
			sprintf(buf,"%d",d);
			return string(buf);
			}   */


void __fastcall TForm3::N7Click(TObject *Sender)
{
	 int Count=0,OwnCount=0;
	 OpenPictureDialog1->Execute();
	 Etalon->LoadFromFile(OpenPictureDialog1->FileName);
		for (int i = 0; i < Try->Width; i++) {
			for (int j = 0; j < Try->Height; j++){
				if (Try->Canvas->Pixels[i][j]==clRed) {
					Count+=1;
				}
			}
	}

	 for (int i = 0; i < Try->Width; i++) {
			for (int j = 0; j < Try->Height; j++){
				if (Try->Canvas->Pixels[i][j]==clRed && Etalon->Canvas->Pixels[i][j]==clBlack) {
					OwnCount+=1;
				}
			}
	}
	   //	Image2->Picture->Bitmap = NULL;
	  //	Etalon->Transparent=true;
	   //	Image2->Canvas->Draw(0,0,Etalon);
		Image2->Canvas->Draw(0,0,Try);
	 float mach = (float)OwnCount/Count *100;
	 Label1->Caption = FloatToStr(RoundTo(mach,-2))+"% співпадіння";
	// Etalon->graphics::-tbitmap();



}
//---------------------------------------------------------------------------

void __fastcall TForm3::test2Click(TObject *Sender)
{
		   ofstream fout;
		   fout.open("coordinates.txt");
		int i=0,j=0,startX=0,startY=0,MinH[1000],MaxH[1000],as=0,ii=0,endX=0,endY=0;
		memset (MaxH, 0, sizeof (MaxH));
	for (int i = 1; i < Try->Width; i++) {
			if (startX==0) {
			for (int j = 1; j < Try->Height; j++)  {
			if (Try->Canvas->Pixels[i][j]==clRed){
				startX=i;
				startY=j;
				fout << "X= "<<i<<"\tY="<<j<<"\n";
				break;
			}
		}
		}
		else break;
	}
		  Image2->Canvas->Pen->Color = clBlue;
		  Image2->Canvas->Pen->Width = 2;
		  Image2->Canvas->MoveTo(startX,startY);
	   	  Label1->Caption = startX;
		   Label2->Caption = startY;
		for (i=startX; i < Try->Width; i+=30) {
			 for (int j=startY; j < Try->Height; j++){
				if (Try->Canvas->Pixels[i][j]==clRed){
					if (MinH[j]>j) {
						MinH[j]=j;
						Image2->Canvas->LineTo(i,j);
					   //	Image2->Canvas->MoveTo(i,j);
						as++;
						fout << "X= "<<i<<"\tY="<<j<<"\n";
						endX = i;
						endY = j;
					   break;
					  //	Label1->Caption = i;
					}
				}
			 }
		}

			Image2->Canvas->MoveTo(startX,startY);
			for (i=startX; i < Try->Width; i+=30) {
			 for (int j=startY; j > 0; j--){
				if (Try->Canvas->Pixels[i][j]==clRed){
					if (MaxH[j]<j) {
						MaxH[j]=j;
						Image2->Canvas->LineTo(i,j);
						fout << "X= "<<i<<"\tY="<<j<<"\n";
					   //	Image2->Canvas->MoveTo(i,j);
					   as++;
					   break;
					  //	Label1->Caption = i;
					}
				}
			 }
		}

				//Image2->Canvas->MoveTo(endX,endY);
			   //	Image2->Canvas->LineTo(endX,endY);
			  Test = Image2->Picture->Bitmap;
			  //Label2->Caption = as;
			 fout.close();
	  /*	for (int i = 0; i < Try->Width; i++) {
			for (int j = 0; j < Try->Height; j++){
				 if (Try->Canvas->Pixels[i][j]==clRed){
					Image2->Canvas->MoveTo(startX,startY);

				 }
			}
		} */
}
//---------------------------------------------------------------------------

 int k=0;
void __fastcall TForm3::N8Click(TObject *Sender)
{

int i ;
	int j;
	int MaxW=0,MaxH=0,MinW=Sob->Width,MinH=Sob->Height;
	int MaxW2=0,MaxH2=0,MinW2=Sob->Width,MinH2=Sob->Height;
	Image2->Picture->Bitmap = NULL;
	Etalon->Transparent=true;
	Image2->Canvas->Draw(0,0,Etalon);
		for (i = 1; i < Sob->Width/2; i++) {
				for (j = 1; j < Sob->Height; j++){
					if (Sob->Canvas->Pixels[i][j]!=clWhite) {
						 if (MaxH<j) {
							 MaxH=j;

						 }
						 if (MinH>j) {
							 MinH=j;

						 }

					}
					Image2->Canvas->Pixels[i][MaxH] = clRed;
						Image2->Canvas->Pixels[i][MinH] = clRed;
				}
		}

		for (i = Sob->Width-1; i > Sob->Width/2; i--) {
			for (j = MaxH; j > MinH; j--) {
				 if (Sob->Canvas->Pixels[i][j]!=clWhite) {
						 if (MaxH2<j) {
							 MaxH2=j;

						 }
						 if (MinH2>j) {
							 MinH2=j;

						 }
						 Image2->Canvas->Pixels[i][MaxH2] = clRed;
						 Image2->Canvas->Pixels[i][MinH2] = clRed;
					}
			}
		}
	 Try = Image2->Picture->Bitmap;
/*int w= Etalon->Width;
int h= Etalon->Height;
for(int x=0;x<w;x++)
  for(int y=20;y<70;y++)
  {
  int p=Etalon->Canvas->Pixels[x][y];
  int b= (GetBValue(p)+k<255)?(GetBValue(p)+k):255;
  int r= (GetRValue(p)+k<255)?(GetRValue(p)+k):255;
  int g= (GetGValue(p)+k<255)?(GetGValue(p)+k):255;

  if(b<0) b=0; if(g<0) g=0; if(r<0) r=0;

  Image2->Canvas->Pixels[x][y] = (TColor)RGB(r,g,b);//рисуем
  }
 // Image2->
  //Image2->Canvas->Draw(0,0,Etalon);     */

}
//---------------------------------------------------------------------------


void __fastcall TForm3::Image2MouseUp(TObject *Sender, TMouseButton Button, TShiftState Shift,
          int X, int Y)
{
	TColor color=Image2->Canvas->Pixels[X][Y];
Label2->Caption="R="+IntToStr(GetRValue(color))+";G="+IntToStr(GetGValue(color))+";B="+IntToStr(GetBValue(color));

	//координати контура
	for (int i = X; i < Image2->Width; i++) {
		for (int j = Y; j < Image2->Height; j++){
			if (Image2->Canvas->Pixels[i][j]!=clWhite) {
				ShowMessage("Координати Х = "+IntToStr(i)+" Y= "+IntToStr(j));
				break;
			}
		}
		break;
	}

	int c = 0;

	//Заливка красным замкнутой области
	Image2->Canvas->Brush->Color = clRed;
	Image2->Canvas->FloodFill(X,Y,color,fsSurface);

	//Поиск красных пикселей


	for(int i=1; i<=Image2->Width; i++)
		{
			for(int y=1; y<=Image2->Height; y++)
				{
				if(Image2->Canvas->Pixels[i][y]==clRed)
					{
						c++;//счетчик красных пикселей
					}
				}
		}
		 ShowMessage("Площа = "+IntToStr(c)+" Y= ");
	   //Заливка былым(изначальным ) цветом
	   Image2->Canvas->Brush->Color = color;
	   Image2->Canvas->FloodFill(X,Y,clRed,fsSurface);


}
//---------------------------------------------------------------------------





void __fastcall TForm3::Image1MouseUp(TObject *Sender, TMouseButton Button, TShiftState Shift,
          int X, int Y)
{
/*	int c = 0;
		TColor color=Image1->Canvas->Pixels[X][Y];
//Label2->Caption="R="+IntToStr(GetRValue(color))+";G="+IntToStr(GetGValue(color))+";B="+IntToStr(GetBValue(color));
	//Заливка красным замкнутой области
	Image1->Canvas->Brush->Color = clRed;
	Image1->Canvas->FloodFill(X,Y,color,fsSurface);

	//Поиск красных пикселей


	for(int i=1; i<=Image1->Width; i++)
		{
			for(int y=1; y<=Image1->Height; y++)
				{
				if(Image1->Canvas->Pixels[i][y]==clRed)
					{
						c++;//счетчик красных пикселей
					}
				}
		}
		 ShowMessage("Площа = "+IntToStr(c)+" Y= ");
	   //Заливка былым(изначальным ) цветом
	   Image1->Canvas->Brush->Color = color;
	   Image1->Canvas->FloodFill(X,Y,clRed,fsSurface);     */

}
//---------------------------------------------------------------------------





